msa4 <- rev_DNA(msa4)
}
if (5 %in% coopt.sub)
msa5 <- clustal(rev_DNA(tailsA), headsB, exec = msa.exec)
if (6 %in% coopt.sub){
msa6 <- clustal(tailsA, rev_DNA(headsB), exec = msa.exec)
msa6 <- rev_DNA(msa6)
}
if (7 %in% coopt.sub)
msa7 <- clustal(rev_DNA(tailsA), rev_DNA(tailsB), exec = msa.exec)
if (8 %in% coopt.sub){
msa8 <- clustal(tailsA, tailsB,  exec = msa.exec)
msa8 <- rev_DNA(msa8)
}
list.msas <- paste(paste("msa", coopt.sub, sep=""), collapse = ",")
comb_msas <- eval(parse(text = paste0("list(", list.msas, ")")))
}
return(comb_msas)
}
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
align_part_set
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = "/Applications/mafft",
msa.program = "mafft")
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = "/user/local/bin/mafft",
msa.program = "mafft")
sequences
align_parts
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = "/user/local/bin/mafft",
msa.program = "mafft")
msa.program
n.coopt.sub
sequences
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = "/usr/local/bin/mafft",
msa.program = "mafft")
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = "/Applications/clustalw-2.1-macosx/clustalw2",
msa.program = "clustalw")
mafft_method
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
# .export = "align_part_set"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
pb <- txtProgressBar(max = ncol(align_parts), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
cl <- makeCluster(ncore)
registerDoSNOW(cl)
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
# .export = "align_part_set"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts,
.export = "align_part_set"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
msa.program
msa.program <- "clustal2"
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts,
.export = "align_part_set"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
# .export = "align_part_set"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
msa.exec
msa.program
msa.program <- "clustalw"
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
# .export = "align_part_set"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
msa.program
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts,
.export = "ape"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts,
.export = "clustal"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
align_part_set
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
# .export = "clustal"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
.packages = "clustal"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts
.packages = "clustal"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts,
.packages = "clustal"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
alt_msa <- foreach(i = 1:ncol(align_parts),
.options.snow = opts,
.packages = "ape"
) %dopar% {
align_part_set(x = sequences, partition_set = align_parts[i],
coopt.sub = n.coopt.sub[i],
method = mafft_method, msa.exec = msa.exec,
msa.program = msa.program)
}
devtools::document()
library(rGUIDANCE)
fas <- ape::read.FASTA("inst/extdata/BB30015.fasta")
library(rGUIDANCE)
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
library(rGUIDANCE)
library(rGUIDANCE)
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
library(rGUIDANCE)
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
res
roxygen2::roxygenise(clean = T)
library(rGUIDANCE)
as.phyDat
dist.ml
nj
multi2di
partitions
roxygen2::roxygenise(clean = T)
roxygen2::roxygenise(clean = T)
library(rGUIDANCE)
treePart
roxygen2::roxygenise(clean = T)
library(rGUIDANCE)
roxygen2::roxygenise(clean = T)
roxygen2::roxygenise(clean = T)
library(rGUIDANCE)
library(rGUIDANCE)
roxygen2::roxygenise()
warnings()
devtools::document()
roxygen2::roxygenise(clean = T)
warnings()
warnings()
roxygen2::roxygenise(clean = T)
warnings()
roxygen2::roxygenise(clean = T)
roxygen2::roxygenise(clean = TRUE)
devtools::document()
library(rGUIDANCE)
library(rGUIDANCE)
devtools::check()
devtools::document()
roxygen2::roxygenise(clean = TRUE)
warnings()
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
library(rGUIDANCE)
roxygen2::tag_name_description()
roxygen2::tag_name_description()
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
library(rGUIDANCE)
roxygen2::roxygenise(clean = TRUE)
library(rGUIDANCE)
roxygen2::roxygenise(clean = TRUE)
library(rGUIDANCE)
library(rGUIDANCE)
roxygen2::roxygenise(clean = TRUE)
## declare i to be a global variable; this is necessary because
## foreach uses non-standard evaluation that codetools is not aware of
## [http://r.789695.n4.nabble.com/R-CMD-check-and-foreach-code-td4687660.html]
## Does not work [CH 2018-01-23]
globalVariables("i")
roxygen2::roxygenise(clean = TRUE)
library(rGUIDANCE)
roxygen2::roxygenise(clean = TRUE)
library(rGUIDANCE)
alt_msas
alt_msas <- list(list("a", "b", "h"), list("a" , "b", "x"))
alt_msas
unlist(alt_msas)
unlist(alt_msas, recursive = F)
base_msa
fas <- ape::read.FASTA("inst/extdata/BB30015.fasta")
sequences =  fas
msa.exec= "/usr/local/bin/mafft"
base_msa <- mafft(x = sequences,
exec = msa.exec, method = method,
maxiterate = 0, op = 1.53, ep = 0,
thread = -1)
method <- "auto"
msa.exec
base_msa <- mafft(x = sequences,
exec = msa.exec, method = method,
maxiterate = 0, op = 1.53, ep = 0,
thread = -1)
library(ips)
base_msa <- mafft(x = sequences,
exec = msa.exec, method = method,
maxiterate = 0, op = 1.53, ep = 0,
thread = -1)
list(list(base_msa, base_msa, base_msa), list(base_msa, base_msa, base_msa))
a <- list(list(base_msa, base_msa, base_msa), list(base_msa, base_msa, base_msa))
unlist(a)
unlist(a, recursive = F)
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
## declare i to be a global variable; this is necessary because
## foreach uses non-standard evaluation that codetools is not aware of
## [http://r.789695.n4.nabble.com/R-CMD-check-and-foreach-code-td4687660.html]
## Does not work [CH 2018-01-23]
globalVariables(i)
library(rGUIDANCE)
setOldClass
setClass
slot
seealso
setMethod
library(rGUIDANCE)
library(rGUIDANCE)
library(rGUIDANCE)
library(rGUIDANCE)
devtools::document()
library(rGUIDANCE)
res <- guidance2(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
align_parts
base_msa <- mafft(x = sequences,
exec = msa.exec, method = method,
maxiterate = 0, op = 1.53, ep = 0,
thread = -1)
cat("Calculate start tree \n")
base.msa.ml <- as.phyDat(base_msa)
# find ML distance as input to nj tree search
ml.dist.msa <- dist.ml(base.msa.ml)
# NJ
start_tree <- nj(ml.dist.msa)
start_tree <- multi2di(start_tree)
start_tree <- compute.brlen(start_tree)
## produce MSA partitions
align_parts <- partitions(start_tree)
library(adephylo)
cat("Calculate start tree \n")
base.msa.ml <- as.phyDat(base_msa)
# find ML distance as input to nj tree search
ml.dist.msa <- dist.ml(base.msa.ml)
# NJ
start_tree <- nj(ml.dist.msa)
start_tree <- multi2di(start_tree)
start_tree <- compute.brlen(start_tree)
## produce MSA partitions
align_parts <- partitions(start_tree)
library(phangorn)
cat("Calculate start tree \n")
base.msa.ml <- as.phyDat(base_msa)
# find ML distance as input to nj tree search
ml.dist.msa <- dist.ml(base.msa.ml)
# NJ
start_tree <- nj(ml.dist.msa)
start_tree <- multi2di(start_tree)
start_tree <- compute.brlen(start_tree)
## produce MSA partitions
align_parts <- partitions(start_tree)
align_parts
rep("all", ncol(align_parts))
rep("all", ncol(align_parts))
# here could be a sampling of co-opts like in
# guidance2. now we sample all
n.coopt.sub <- rep("all", ncol(align_parts))
n.coopt <- (Ntip(start_tree) - 3) * 8
n.coopt
n.coopt.sub
library(rGUIDANCE)
devtools::document()
devtools::document()
devtools::document()
library(rGUIDANCE)
library(rGUIDANCE)
devtools::document()
library(rGUIDANCE)
devtools::document()
library(rGUIDANCE)
fas <- ape::read.FASTA("inst/extdata/BB30015.fasta")
res <- guidance(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
exec <- switch(os, Linux = "mafft", Darwin = "mafft",
Windows = "mafft.bat")
os <- Sys.info()[1]
exec <- switch(os, Linux = "mafft", Darwin = "mafft",
Windows = "mafft.bat")
exec
exec <- switch(os, Linux = "muscle", Darwin = "muscle",
Windows = "muscle3.8.31_i86win32.exe")
exec
exec <- switch(os, Linux = "mafft", Darwin = "mafft",
Windows = "mafft.bat")
msa.program
## look up MSA program specified
msa.program <- str_extract(msa.exec, "mafft|muscle|clustal\\w")
library(rGUIDANCE)
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
align_part_set
library(rGUIDANCE)
res <- HoT(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
res
fas
res <- guidance2(sequences =  fas, msa.exec= "/usr/local/bin/mafft")
res
res
res@msa
list(res@msa, res@msa, res@msa, res@msa, res@msa)
a <- list(res@msa, res@msa, res@msa, res@msa, res@msa)
a
seq_along(a)
zip.file <- "dev/"
for(i in seq_along(a)){
write.FASTA(a[[i]], file =paste0(zip.file, "/alt_msa_", i, ".fas"))
}
files <- list.files(alt_msas)
files <- list.files(zip.file)
files
grep("alt_msa", files)
files[grep("alt_msa", files)]
files <- files[grep("alt_msa", files)]
gzfile(zip.file, files)
zip(zip.file, files)
zip.file
files
zip(zip.file, files = files)
zip(zipfile = zip.file, files = files)
files <- list.files(zip.file, full.names = T)
files <- files[grep("alt_msa", files)]
files
zip.file
files <- files[grep("alt_msa", files)]
zip(zipfile = zip.file, files = files)
zip(zipfile = paste(zip.file, "alt_msas.zip", files = files)
files <- files[grep("guidance", files)]
for (i in 1:(bootstrap)){
file.rename(paste(tempdir(), files[i], sep = "/"),
paste(tempdir(), paste0("altMSA", i, ".fas"), sep = "/"))}
files <- list.files(tempdir(), full.names = TRUE)
files <- files[grep("altMSA*", files)]
zip(zipfile = zip.file, files = files)
## NOTE: maybe better to use gzfile,
## currently zip creates many weird subfolders
}
## Delete temporary files
# this deletion approach has proven best to delete everything
files <- list.files(tempdir(), full.names = TRUE)
files <- files[-grep("rs-graphics", files)]
unlink(files, force = TRUE, recursive = TRUE)
## Return guidance class
## -------------------------
if (inherits(sequences, "AAbin")){
guidanceAA(base_msa, score, "guidance")
} else {
guidanceDNA(base_msa, score, "guidance")
}
}
zip(zipfile = paste0(zip.file, "/alt_msas.zip"), files = files)
paste0(zip.file, "/alt_msas.zip")
for(i in seq_along(a)){
write.FASTA(a[[i]], file =paste0(zip.file, "alt_msa_", i, ".fas"))
}
files <- list.files(zip.file, full.names = T)
files <- files[grep("alt_msa", files)]
files
zip.file
zip(zipfile = paste0(zip.file, "alt_msas.zip"), files = files)
files
file.remove(files)
Sys.date()
Sys.Date()
Sys.Date()
zip(zipfile = paste0(zip.file, "alt_msas_", Sys.Date(), ".zip"), files = files)
files <- list.files(zip.file, full.names = T)
files <- files[grep("alt_msa", files)]
zip(zipfile = paste0(zip.file, "alt_msas_", Sys.Date(), ".zip"), files = files)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(rGUIDANCE)
roxygen2::roxygenise()
roxygen2::roxygenise(clean = T)
library(rGUIDANCE)
roxygen2::roxygenise()
devtools::document()
library(rGUIDANCE)
library(rGUIDANCE)
devtools::document()
library(rGUIDANCE)
devtools::document()
library(rGUIDANCE)
partitions <- function(tree){
# get all partitions of the tree
partition <- treePart(tree, "dummy")
# remove duplicated partition (first bifurcation from node)
# if the first split includes a single sequences, then do not take it as
# first comparision
partition <- partition[!(colSums(partition) %in% c(nrow(partition) - 1, 1))]
# find dupliate and remove from partitions
## [FK - 2017-03-27]
## this can be done faster if only the combinations are checked.
dup <- list()
res <- list()
for (j in 1:ncol(partition)){
part <- partition[,-j]
for (i in 1:ncol(part)){
dup[[i]] <- (partition[, j] > 0) == !(part[, i] > 0)
}
res[[j]] <- dup
}
dup <- lapply(res, function(x) do.call(cbind, x))
del <- unlist(lapply(dup, function(x) which(apply(x, 2, all))))
if (length(del))
partition <- partition[-del[2]]
return(partition)
}
devtools::document()
library(rGUIDANCE)
fas <- ape::read.FASTA("inst/extdata/BB30015.fasta")
res <- guidance(sequences =  fas, msa.exec= "/usr/local/bin/mafft", ncore = 12)
fpath <- system.file("extdata", "BB30015.fasta", package="my_package")
fpath
fpath <- system.file("extdata", "BB30015.fasta", package="rGUIDANCE")
fpath
read.fas(fpath)
ips::read.fas(fpath)
guidance
library(rGUIDANCE)
devtools::document()
devtools::document()
devtools::document()
library(rGUIDANCE)
install.packages("phylobase")
install.packages("phylobase")
install.packages("phylobase")
install.packages("phylobase")
library(rGUIDANCE)
devtools::document()
library(rGUIDANCE)
